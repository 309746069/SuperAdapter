{"name":"Superadapter","tagline":"Adapter(BaseAdapter, RecyclerView.Adapter) wrapperr for android.","body":"![Download](https://api.bintray.com/packages/chenenyu/maven/SuperAdapter/images/download.svg) [![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-SuperAdapter-brightgreen.svg?style=flat)](http://android-arsenal.com/details/1/3027)\r\n## [Chinese Version 中文版](https://github.com/byteam/SuperAdapter/blob/master/README-zh-rCN.md)\r\n# SuperAdapter\r\n*Adapter(ListAdapter, RecyclerView.Adapter) wrapper for android.*\r\n\r\n**Less code for redundant adapter.** You won't need to write ViewHolder, createView, setTag, getTag, and confuse how to setOnItemClickListener to RecyclerView, etc. SuperAdapter does everything for you! The only thing you really need to do is that implement a method `onBind()`.  \r\n\r\n## Android Studio:\r\n\r\nIn build.gradle:\r\n\r\n`compile 'org.byteam.superadapter:superadapter:latestVersion'`\r\n## Eclipse:\r\nAdd [latest Jar](https://github.com/byteam/SuperAdapter/releases) to libs dir manually.\r\n\r\n## CHANGELOG\r\n* 2016/1/16 v2.2.0\r\n* Transfer to organization for a teamwork.\r\n* 2016/1/15 v2.1.2\r\n* Bug fixed: set OnItemClickListener to nested adapter caused crash in RecyclerView.\r\n* 2016/1/14 v2.1.1\r\n* Add convenient method: setScaleType().\r\n* Bug fixed：Support public method getView() for ViewHolder in BaseAdapter.\r\n* 2016/1/13 v2.1.0 \r\n* addHeaderView()/addFooterView() for RecyclerView.Adapter.\r\n\r\n## How to use\r\n\r\nIf a simple adapter, it can be simplified like this:  \r\n\r\n```\r\npublic class RecyclerSingleAdapter extends SuperAdapter<String> {\r\n    public RecyclerSingleAdapter(Context context, List<String> items, int layoutResId) {\r\n        super(context, items, layoutResId);\r\n    }\r\n\r\n    @Override\r\n    public void onBind(int viewType, BaseViewHolder holder, int position, String item) {\r\n        holder.setText(R.id.tv_name, item);\r\n    }\r\n}\r\n```  \r\n\r\nThen:  \r\n\r\n```\r\nmSingleAdapter = new RecyclerSingleAdapter(getContext(), names, R.layout.item_type1);  \r\nrecyclerView.setAdapter(mSingleAdapter);\r\n```  \r\nIf a complex adapter, it can be simplified like this:  \r\n\r\n```\r\npublic class RecyclerMultiAdapter extends SuperAdapter<MockModel> {\r\n    public RecyclerMultiAdapter(Context context, List<MockModel> items, IMultiItemViewType<MockModel> multiItemViewType) {\r\n        super(context, items, multiItemViewType);\r\n    }\r\n\r\n    @Override\r\n    public void onBind(int viewType, BaseViewHolder holder, int position, MockModel item) {\r\n        switch (viewType) {\r\n            case 0:\r\n                holder.setText(R.id.tv_name, item.getName());\r\n                break;\r\n            case 1:\r\n                holder.setText(R.id.tv_name, item.getName());\r\n                holder.setImageResource(R.id.iv_portrait, R.mipmap.ic_launcher);\r\n                holder.setText(R.id.tv_age, String.valueOf(item.getAge()));\r\n                break;\r\n        }\r\n    }\r\n}\r\n```  \r\n\r\nThen:  \r\n\r\n```\r\nmMultiAdapter = new RecyclerMultiAdapter(getContext(), models, new IMultiItemViewType<MockModel>() {\r\n\t@Override\r\n\tpublic int getItemViewType(int position, MockModel mockModel) {\r\n    \tif (position % 2 == 0) {\r\n        \treturn 0;\r\n        }\r\n        return 1;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int getLayoutId(int viewType) {\r\n    \tif (viewType == 0) {\r\n        \treturn R.layout.item_type1;\r\n    \t}\r\n   \t\treturn R.layout.item_type2;\r\n    }\r\n});\r\nrecyclerView.setAdapter(mMultiAdapter);\r\n```  \r\nThe usages between AdapterView(ListView, GridView) and RecyclerView are almost the same.\r\n\r\n\r\nInspired by Ray.  \r\n\r\n**Welcome to submit pull requests and open iusses!  : )**\r\n\r\n## License\r\n\r\n```\r\nCopyright 2015-2016 byteam.org.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}